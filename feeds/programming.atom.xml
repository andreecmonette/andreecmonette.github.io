<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andree Monette</title><link href="http://acmonette.com/" rel="alternate"></link><link href="http://acmonette.com/feeds/programming.atom.xml" rel="self"></link><id>http://acmonette.com/</id><updated>2014-03-24T01:00:00-04:00</updated><entry><title>Counting down from infinity, and other tricks with __del__</title><link href="http://acmonette.com/here-there-be-pydras.html" rel="alternate"></link><updated>2014-03-24T01:00:00-04:00</updated><author><name>Andree Monette</name></author><id>tag:acmonette.com,2014-03-24:here-there-be-pydras.html</id><summary type="html">&lt;p&gt;Today, I solved 8-queens in Python's garbage collector, along with other horrific abuses of same. Python provides the &lt;a href="http://stackoverflow.com/questions/3554952/del-at-program-end"&gt;rather&lt;/a&gt; &lt;a href="http://stackoverflow.com/questions/10352480/how-to-use-del-in-a-reliable-way"&gt;controversial&lt;/a&gt; magic method &lt;code&gt;__del__&lt;/code&gt;, which (might!) be called before an object is garbage collected. Playing with this (in CPython 2.7.3) yields some amusing results.&lt;/p&gt;
&lt;p&gt;First, there's figuring out where &lt;code&gt;__del__&lt;/code&gt; even gets called. I wrote a &lt;a href="http://github.com/andreecmonette/pydras/blob/master/omnom.py"&gt;script to illustrate some common cases&lt;/a&gt; -- Python uses &lt;a href="http://en.wikipedia.org/wiki/Reference_counting"&gt;reference counting&lt;/a&gt; with explicit collection of cycles. That is, for each object that exists, Python keeps an count of the number of times that variable is referred to, such as if it gets assigned explicitly to a variable name, included in an array, assigned as an attribute of some other object, and so on. Whenever a variable name passes out of scope or some containing object is garbage collected, the reference counter for that object is decremented. Once it hits 0, Python (usually, we'll see an exception soon) garbage collects the object, calling the &lt;code&gt;__del__&lt;/code&gt; method and freeing up its memory. Python also attempts to clear cyclic references, such as in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Omnom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Omnom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It notably won't do so if they have user-defined &lt;code&gt;__del__&lt;/code&gt; methods, as it doesn't know what order is safe to execute those methods in.&lt;/p&gt;
&lt;p&gt;The details of garbage collection are implementation-specific, so there are differences in how this is handled between the default CPython and other implementations. There are also interesting consequences from, for example, being in a REPL - whatever was returned to the terminal last ends up in the &lt;code&gt;_&lt;/code&gt; variable, so it counts as a reference and the object isn't garbage collected immediately.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So how do we abuse this? Well, we can write &lt;a href="http://github.com/andreecmonette/pydras/blob/master/countdown.py"&gt;a program that counts backwards from "infinity"&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Countdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Countdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="n"&gt;Countdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This produces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;RuntimeError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;recursion&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="n"&gt;exceeded&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;calling&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;Countdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__del__&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Countdown&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f570b3ea878&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignored&lt;/span&gt;
&lt;span class="mi"&gt;336&lt;/span&gt;
&lt;span class="mi"&gt;335&lt;/span&gt;
&lt;span class="mi"&gt;334&lt;/span&gt;
&lt;span class="mi"&gt;333&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, &lt;code&gt;Countdown()&lt;/code&gt; instances are generated until the recursion limit is reached. This doesn't halt program execution because &lt;code&gt;__del__&lt;/code&gt; explicitly ignores exceptions, but still short-circuits the function call and the instantiations end. They are then resolved in reverse order (actually, outwards from the innermost object).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Another trick that we can do is to create a mythological beast of old, spawning two instances for each deleted instance. Enter &lt;a href="http://github.com/andreecmonette/pydras/blob/master/pydra.py"&gt;the Pydra&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pydra&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neck&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neck&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neck&lt;/span&gt;
    &lt;span class="n"&gt;Pydra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neck&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Pydra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;neck&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Pydra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As the beast's heads are cut off, two immediately grow back from the severed stump - at least until the recursion limit is hit. What do we get from this? Setting the recursion limit to a reasonably low number with an inserted call of &lt;code&gt;sys.setrecursionlimit(16)&lt;/code&gt; and suppressing the ignored recursion limit exceptions shows nicely what's going on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;pydra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;ll&lt;/span&gt;
&lt;span class="n"&gt;lll&lt;/span&gt;
&lt;span class="n"&gt;llr&lt;/span&gt;
&lt;span class="n"&gt;lr&lt;/span&gt;
&lt;span class="n"&gt;lrl&lt;/span&gt;
&lt;span class="n"&gt;lrr&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="n"&gt;rl&lt;/span&gt;
&lt;span class="n"&gt;rll&lt;/span&gt;
&lt;span class="n"&gt;rlr&lt;/span&gt;
&lt;span class="n"&gt;rr&lt;/span&gt;
&lt;span class="n"&gt;rrl&lt;/span&gt;
&lt;span class="n"&gt;rrr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The garbage collector executes a &lt;a href="http://en.wikipedia.org/wiki/Depth-first_search"&gt;depth-first search&lt;/a&gt;! Other tree traversals are possible as well - breadth-first search, for example, is possible by defining a &lt;code&gt;__del__&lt;/code&gt; method in &lt;a href="https://github.com/andreecmonette/pydras/blob/master/shyPydra.py"&gt;a container class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By making a very small change to this program, it's possible to create an unbounded memory leak. The &lt;a href="http://github.com/andreecmonette/pydras/blob/master/learneanPydra.py"&gt;Learnean Pydra&lt;/a&gt; assigns the two created objects to local variables. This causes the call stack pointer to be incremented as the tree deepens. Once this pointer reaches 50 (which is defined in the CPython source in &lt;a href="https://github.com/python-git/python/blob/master/Include/object.h"&gt;includes/object.h&lt;/a&gt; as PyTrash_UNWIND_LEVEL) it's added to a trashcan stack for deallocation later. This also causes the tree traversal to terminate at 50 and unwind, doing a &lt;a href="/images/fractalDFS.png"&gt;pleasant looking depth-first search&lt;/a&gt;. Since the deallocator continues to get called on objects when the call stack is longer than 50, it keeps allocating more memory onto the heap with the &lt;code&gt;mmap()&lt;/code&gt; and &lt;code&gt;brk()&lt;/code&gt; system calls (&lt;a href="http://jvns.ca/blog/2013/12/22/fun-with-strace/"&gt;thanks, strace!&lt;/a&gt;) until the kernel panics. Without the delay introduced by &lt;code&gt;print&lt;/code&gt;ing the output, this can fill all the memory up in a typical laptop within a few seconds. By contrast, the Pydra never allocates additional memory at all, and in fact makes no system calls besides &lt;code&gt;write()&lt;/code&gt; to spit output (and ignored errors) to stdout and stderr.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Finally, I decided to cap off all this &lt;code&gt;__del__&lt;/code&gt; nonsense by implementing an 8-queens solver using the tree traversal we get for free using the garbage collector. The result is &lt;a href="https://github.com/andreecmonette/pydras/blob/master/delqueen.py"&gt;delqueen&lt;/a&gt;, a standalone or &lt;a href="https://github.com/andreecmonette/pydras/blob/master/importqueens.py"&gt;importable&lt;/a&gt; module that defines a class method and assigns an object representing an empty board. Then it loops until the user terminates the program with &lt;code&gt;SIGINT&lt;/code&gt;/&lt;code&gt;^C&lt;/code&gt;, at which point the board is garbage collected. Upon collection, a board checks to see if it's an illegal position or a solution (incrementing a solution counter crudely slapped on the &lt;code&gt;__builtins__&lt;/code&gt; module, because if we've abused Python this far, might as well take it all the way). If it isn't, it spawns 8 instances of its own class with queens added to the following row. To add to the absurdity, this is in fact an N-queens solver, with N being the length of &lt;code&gt;__name__&lt;/code&gt;. (Unless explicitly set by an importing file, this is either &lt;code&gt;'__main__'&lt;/code&gt; or &lt;code&gt;'delqueen'&lt;/code&gt;, which are incidentally 8 characters long.)&lt;/p&gt;
&lt;p&gt;The results should be, at the very least, informative:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="nx"&gt;delqueen.py&lt;/span&gt;
&lt;span class="nb"&gt;Interrupt&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;^&lt;/span&gt;&lt;span class="nx"&gt;CTraceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;recent&lt;/span&gt; &lt;span class="nb"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="nb"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;delqueen.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;KeyboardInterrupt&lt;/span&gt;
        &lt;span class="mi"&gt;15720&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="nx"&gt;states&lt;/span&gt; &lt;span class="nx"&gt;traversed.&lt;/span&gt;
        &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="na"&gt;-queens&lt;/span&gt; &lt;span class="nx"&gt;solutions&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="coding"></category><category term="hacker school"></category><category term="python"></category></entry><entry><title>DistroWeb: past, present, and future</title><link href="http://acmonette.com/distroweb.html" rel="alternate"></link><updated>2014-03-16T23:30:00-04:00</updated><author><name>Andree Monette</name></author><id>tag:acmonette.com,2014-03-16:distroweb.html</id><summary type="html">&lt;p&gt;The idea for &lt;a href="https://github.com/sudowhoami/distroweb/"&gt;DistroWeb&lt;/a&gt; came to &lt;a href="https://github.com/sudowhoami/"&gt;Rose Ames&lt;/a&gt; and I during a &lt;a href="http://www.gogocurryusa-ny.com/"&gt;late-night Japanese curry dinner&lt;/a&gt; after having just seen &lt;a href="http://www.meetup.com/ny-tech/events/164513032/"&gt;Richard Stallman's talk at the Cooper Union&lt;/a&gt; on free software. We didn't implement any ideas from the talk itself, but it got us in a mood of thinking about distributed systems. We chatted about what major centralized systems could be decentralized. A few major examples came to mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Website hosting. Frequently, content is hosted on a single server or set of servers and served from that centralized location to clients who ask for it. When content is mirrored, a central location points to mirrors, which is quite easy to target or disrupt.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://en.wikipedia.org/wiki/Domain_Name_System"&gt;domain name&lt;/a&gt; system - essentially, it's controlled by a small committee of developers from seven different countries, who all meet in data centres in the US a few times a year to renew the keys for the root DNS server.&lt;/li&gt;
&lt;li&gt;Search is also centralized, mostly around such companies as Google.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DistroWeb is essentially an &lt;a href="http://en.wikipedia.org/wiki/Overlay_network"&gt;overlay network&lt;/a&gt; over the Internet that imitates the World Wide Web, serving documents to browsers from remote machines that are uniquely identified by a URL - currently, that URL is &lt;code&gt;http://localhost:1234/distroweb/&amp;lt;hash&amp;gt;&lt;/code&gt;, with &lt;code&gt;&amp;lt;hash&amp;gt;&lt;/code&gt; serving as a unique identifier for each page. Right now, a lot of the functionality is hardcoded, but we're looking to fix that later in the Hacker School batch. Installation requires &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt;, and is quite simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/sudowhoami/distroweb/&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;distroweb&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;distroweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;distroWeb&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;  &lt;span class="n"&gt;Spinning&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nl"&gt;Proxy:&lt;/span&gt;  &lt;span class="n"&gt;Listening&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt;
&lt;span class="nl"&gt;Server:&lt;/span&gt;  &lt;span class="n"&gt;Listening&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;
&lt;span class="nl"&gt;DHT:&lt;/span&gt;  &lt;span class="n"&gt;Listening&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;54321&lt;/span&gt;
&lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;servers&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be followed by browsing to pages encoded in the above format.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;
&lt;p&gt;Once the server is running, users can browse DistroWeb by visiting pages encoded in the above format. (At the time of initial writing, we haven't implemented a lot of features like bootstrapping a person's initial list of peers, or implementing &lt;a href="http://en.wikipedia.org/wiki/TCP_hole_punching"&gt;TCP hole punching&lt;/a&gt;, so fetching documents might require a bit of code-diving — however, I'm documenting here what we have left to write and will add addenda as these features are coded and DistroWeb gets closer to "release".)&lt;/p&gt;
&lt;h1&gt;The design of DistroWeb&lt;/h1&gt;
&lt;p&gt;The following is a combination of documentation and design spec, with the intention of shifting the points here from the latter into the former category as the remaining DistroWeb functionality gets coded, probably in early April.&lt;/p&gt;
&lt;h2&gt;High-level design&lt;/h2&gt;
&lt;p&gt;A DistroWeb node is initialized by executing the file &lt;code&gt;distroweb.js&lt;/code&gt;, which serves as a wrapper file that starts three servers - distroProxy, which receives HTTP GET requests from the browser, distroServer, which handles content delivery (in conjunction with distroClient) between nodes based on requests using the distroWeb protocol, and the DHT, a distributed hash table which is used to look up metadata about a requested hash (including, crucially, which nodes are "seeding" that hash, so that the distroClient can issue requests to that node).&lt;/p&gt;
&lt;h2&gt;Distributed hash table&lt;/h2&gt;
&lt;p&gt;One of the core concerns we had when writing DistroWeb is that we wanted to reduce our reliance on centralized servers as much as possible. We took our inspiration from distributed protocols (most notably &lt;a href="http://en.wikipedia.org/wiki/BitTorrent"&gt;BitTorrent&lt;/a&gt;). Traditionally, files shared through BitTorrent have been accessed through central tracker files, but more recently people have been using the Kademlia protocol to find files on a network. DistroWeb reimplements the distributed hash table idea that is at the heart of protocols like Kademlia. Currently, this is implemented by providing (currently, hardcoding) a list of some peers which is distributed to each node on initial startup. When a page is requested via a hash, the &lt;a href="http://en.wikipedia.org/wiki/Hamming_distance"&gt;Hamming distance&lt;/a&gt; between the binary encodings of the hash and each peer's node ID is calculated, and then a request for the hash including the port being listened on is passed along to the "closest" peer to that node. If the connection fails, the request is passed to the next closest and so on. At the receiving end, the node pushes the address that the connection was received on and the port it is listening on onto the request and continues to relay it until it reaches a node that doesn't have any closer nodes listed. This peer then "takes responsibility" for tracking the document, serving whatever tracker information it has on that hash to the originator, and accepting notifications from nodes that a particular version of a file is being served. If it doesn't currently track that file, it creates a tracker file and sends the empty string as a response. Abstractly, the distributed hash table is implemented as an interface for creating and adding metadata about a file, with the tracker node handling cleanup of dropped nodes and obsolete data. A final feature to increase redundancy and scalability for popular files involves having nodes that route many requests for a tracker file take responsibility for tracking it themselves. This should allow the network to be robust against trackers failing, as tracker files will get distributed to other accessible nodes near that file. &lt;/p&gt;
&lt;h2&gt;Peer regeneration&lt;/h2&gt;
&lt;p&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;If a peer times out or does not respond to DistroWeb requests while searching for a file, other peers are asked for some of their peers in order to replace the missing peers. Peers that initiate a DistroWeb request are also added to the recipient's peers list, up to a limit. Peers that time out are only removed from a list if they can be replaced - if the end of the peers list is reached without making a valid connection the assumption is made that the client's network connection is temporarily nonfunctional. When peers are replaced or added, the list of tracker files will be checked to see whether any new peers are closer to the node's tracked hashes than the node itself, and if they are, those tracker files will be sent to the nodes in question for concatenation to whatever tracker file they currently have. &lt;/p&gt;
&lt;h2&gt;Signed versioning&lt;/h2&gt;
&lt;p&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;Documents will carry a header signed with the private key corresponding to their hash - this signature will consist of a version number and checksum of the content. Additionally, the tracker packets will keep track of version numbers, to more easily facilitate updating of content. If a tracker node is informed that someone is seeding a newer version of a document, it will check that the document corresponds to the same hash and then notify the nodes that it is tracking that a newer version is available. (Generally, this will happen first when the owner of the document updates it and sends a notification about updating it into the DHT). Thus, someone who hosts a page on the DistroWeb can update their page simply by generating a new signature with a higher version number and requesting it, at which point it will be seeded by listening nodes tracked by the tracker.&lt;/p&gt;
&lt;h2&gt;Client-based naming&lt;/h2&gt;
&lt;p&gt;&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;Clients can choose the names that they apply to documents, but documents include a suggested shortname and longname that the client will associated with a given hash. For example, if a page uses &lt;code&gt;bob&lt;/code&gt; as a shortname, and &lt;code&gt;bobs_cutlery&lt;/code&gt; as a longname, a user that has accessed that hash once will be able to browse to it at &lt;code&gt;http://localhost:1234/distroweb/bob&lt;/code&gt;, &lt;code&gt;http://localhost:1234/distroweb/bobs_cutlery&lt;/code&gt;, or the original hash. Name collisions will be handled by defaulting to the long name or appending a numeral to the name. Initial linking will be done by hash, but once a page is accessed the proxy server will issue a 301 redirect to the actual page. Pages on the World Wide Web can also be referenced and linked to within DistroWeb pages; &lt;code&gt;http://localhost:1234/www.reddit.com&lt;/code&gt; returns a 301 to &lt;code&gt;http://www.reddit.com/&lt;/code&gt;, for example.&lt;/p&gt;
&lt;h2&gt;Distributed vote-based search&lt;/h2&gt;
&lt;p&gt;&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;Searching DistroWeb involves sending out UDP packets with the search query to all of one's neighbors, who then pass along the packet, sending votes for a particular page back. If a node is storing a page and wishes to index it for public search, they do so by using their node ID to create a unique mapping from words to bitmasks, then use these bitmasks in constructing a &lt;a href="http://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom filter&lt;/a&gt; for that document. These Bloom filters, along with the hashes used to create them, are passed along to trackers for that document (through the DHT), which run checks against incoming search queries and send back the IDs of matched hashes. The matched hashes are then compiled together at the client end into a list, ranked by the number of matched Bloom filters. &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;We may end up having the installation attempt to alias distroweb to localhost, to produce http://distroweb/ urls.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;At the time of initial writing, we haven't implemented a lot of features like bootstrapping a person's initial list of peers, or implementing &lt;a href="http://en.wikipedia.org/wiki/TCP_hole_punching"&gt;TCP hole punching&lt;/a&gt;, so fetching documents might require a bit of code-diving - however, I'm documenting here what we have left to write and will add addenda as these features are coded and DistroWeb gets closer to "release".&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;As of March 17, this hasn't been implemented yet - only the proxy, file fetcher, and DHT have been implemented - but the plan is to implement it in April. These footnotes will be amended as these features are added.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;This also hasn't been implemented.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;This isn't implemented yet either, except for the external redirect to the web.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Also not yet implemented.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="hacker school"></category><category term="coding"></category><category term="distroweb"></category><category term="node"></category><category term="javascript"></category></entry><entry><title>Hacker School - the first four weeks</title><link href="http://acmonette.com/hacker-school-month-one.html" rel="alternate"></link><updated>2014-03-10T18:25:00-04:00</updated><author><name>Andree Monette</name></author><id>tag:acmonette.com,2014-03-10:hacker-school-month-one.html</id><summary type="html">&lt;p&gt;The first week of &lt;a href="http://hackerschool.com"&gt;Hacker School&lt;/a&gt; I started out worried that I'd have trouble finding my way and being able to contribute meaningfully to a project. I'm about four weeks in now, and I can say proudly now that the opposite is true. In the past four weeks, I've paired with two awesome fellow programmers and pushed out two big projects and have started work on a third. I've also had a number of wonderful smaller collaborations with people on a number of topics both in and far out of my standard comfort zone, and have felt like I've struck the right balance over my time here of excited and terrified.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The three major projects I've been working on so far have been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PaddyBadger/BouncyBitcoinApp"&gt;BouncyBitcoin&lt;/a&gt;, an Android app written with &lt;a href="https://github.com/PaddyBadger"&gt;PaddyBadger&lt;/a&gt; that pulls a number (in this case, the price of Bitcoin in a choice of four currencies) from a web endpoint and constructs a font made of balls to display the number on the screen. The balls can be pushed around by the user's finger, and suffer the effects of gravity (measured by the phone accelerometer) when not busy displaying the price. When they bounce off the edges of the screen, they vibrate the phone. This may be the most distracting thing I've built with someone from scratch in four days.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sudowhoami/distroweb"&gt;DistroWeb&lt;/a&gt;, a distributed webserver written with &lt;a href="https://github.com/sudowhoami"&gt;Rose Ames&lt;/a&gt;. DistroWeb implements a &lt;a href="http://en.wikipedia.org/wiki/Distributed_hash_table"&gt;distributed hash table&lt;/a&gt; (thanks to &lt;a href="http://davidad.github.io/"&gt;davidad&lt;/a&gt; for the suggestion) over a &lt;a href="http://en.wikipedia.org/wiki/Hamming_distance"&gt;Hamming distance metric&lt;/a&gt; to fetch tracker files which are used to download pages from peers on a network to a proxy server, which in turn listens for browser requests on the user's local machine. Future ideas for this include a voluntary, client-editable "suggested bookmark" system of DNS, versioning and signing of documents with private keys to allow for persistent editable webpages, and a distributed search feature using &lt;a href="http://en.wikipedia.org/wiki/Overlay_multicast"&gt;overlay multicast&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom filters&lt;/a&gt; to turn the normally storage-intensive deterministic task of search into a distributable probabilistic one.&lt;/li&gt;
&lt;li&gt;This week I've started &lt;a href="https://github.com/andreecmonette/yapa"&gt;yapa&lt;/a&gt;, an implementation of the pegboard game Plinko, where a disc falls through several pegs and settles finally in a spot at the bottom. I'm looking to do something a bit odd with this by implementing a physics engine which parametrizes motion from one timestep to the next and calculates minima for distance equations explicitly (using the quadratic equation without gravity or the cubic equation with it) to detect collisions, then pushes collision events onto a priority queue (priority in this case being a fraction of the current timestep) and propogates the changed equations forward to detect further collisions. This should result in a physics engine which a) runs slower than typical such engines, but b) is more fun to implement, and will come up with accurate physics no matter what the computational lag is or how many collisions occur in one timestep, floating point weirdness aside. (Maybe I should do the calculations symbolically?) I've already spoken to a few Hacker Schoolers who are interested in pairing on this, so that's pretty exciting.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Meanwhile, I've worked on a few smaller things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first day, I learned about &lt;a href="http://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; from &lt;a href="http://mathamy.com/"&gt;Amy Hanlon&lt;/a&gt;, and had a fun time shooting down bugs in a Usenet post classification problem.&lt;/li&gt;
&lt;li&gt;I've explored the weird and wonderful land of Haskell, Elm and functional programming, mostly with Chen Lin and &lt;a href="https://github.com/plredmond"&gt;Patrick Redmond&lt;/a&gt;. Thanks to &lt;a href="https://github.com/evancz"&gt;Evan Czaplicki&lt;/a&gt; for a super accessible explanation of &lt;a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)"&gt;monads&lt;/a&gt; (they map and join!)&lt;/li&gt;
&lt;li&gt;Davidad led a workshop on x64 assembly that covered his &lt;a href="http://davidad.github.io/blog/2014/02/25/overkilling-the-8-queens-problem/"&gt;incredibly fast and elegantly designed 8-queens solver&lt;/a&gt; that got me super excited about assembly - I'm strongly considering implementing the distributed search algorithm in assembly now (along with something like CUDA).&lt;/li&gt;
&lt;li&gt;Rose has given me invaluable tutoring on &lt;a href="http://www.vim.org/"&gt;vim&lt;/a&gt;, which is now my main editor.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lord.io"&gt;Robert Lord&lt;/a&gt; (who incidentally has an awesome domain name) gave me invaluable assistance with getting &lt;a href="http://threejs.org"&gt;three.js&lt;/a&gt; up, which I'm implementing yapa in. He also revived the Iron Blogger challenge, and is thus in some way responsible for this whole post existing.&lt;/li&gt;
&lt;li&gt;Amy also wrote a &lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;awesome Pelican/Github Pages tutorial&lt;/a&gt;, which was of immense help getting this blog set up. She was also super helpful with getting the configuration working with the particular theme I'm using.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've missed writing about countless awesome pairing moments, presentations, happenstance conversations, tabletop games, banh mi lunches, and random moments of cool. I'm really hoping I'll get to them at some point, but there's such a density of awesome that it'd be hard to encapsulate it all. The amount and potency of concentrated &lt;a href="http://jvns.ca/blog/2014/03/10/help/"&gt;help&lt;/a&gt; that goes on here blows my mind, and I can't wait to see what happens in the next few months. (I won't wait that long to blog again, though - due to Iron Blogger, I'm definitely going to blog this week, and I suspect I'll be blogging more often than that. I'm going to offer my own opinions about what makes Hacker School so great, as well as go more into detail on some of the projects that I've been working on here.)&lt;/p&gt;</summary><category term="hacker school"></category><category term="coding"></category></entry></feed>